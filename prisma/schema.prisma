generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String              @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  accounts          Account[]
  sessions          Session[]
  bookings          Booking[]
  MembershipTracker MembershipTracker[]
  role              Role                @default(USER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum Role {
  USER
  OWNERSIMPLE
  OWNERADVANCED
  OWNERPREMIUM
}

model MembershipTracker {
  id           String     @id @default(cuid())
  date         DateTime
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipId String
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Membership {
  id                String              @id @default(cuid())
  name              String
  description       String
  price             Decimal             @db.Decimal(10, 2)
  role              Role
  advantages        String[]            @default([""])
  MembershipTracker MembershipTracker[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barbershop {
  id            String                  @id @default(uuid())
  name          String
  address       String
  imageUrl      String
  description   String                  @default("Seja bem-vindo à nossa barbearia, onde tradição e estilo se encontram em perfeita harmonia. Nossa equipe de mestres barbeiros transforma cortes de cabelo e barbas em obras de arte. Em um ambiente acolhedor, promovemos confiança, estilo e uma comunidade unida.")
  paymentMethod BarbershopPaymentMethod @default(ON_LOCATION)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  services      Service[]
}

model Service {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  bookings     Booking[]
}

enum BarbershopPaymentMethod {
  ON_LOCATION
  IN_ADVANCE
}

model Booking {
  id        String        @id @default(uuid())
  date      DateTime
  status    BookingStatus @default(WAITING_FOR_PAYMENT)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  WAITING_FOR_PAYMENT
  BOOKING_CONFIRMED

}
